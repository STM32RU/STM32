[{"id":0,"href":"/categories/","title":"Categories","parent":"Главная","content":""},{"id":1,"href":"/tags/","title":"Tags","parent":"Главная","content":""},{"id":2,"href":"/libraries/","title":"Библиотеки","parent":"Главная","content":"Источник: @stm32std CMSIS - низкоуровневая библиотека, разработаная компанией ARM, для работы с микроконтроллерами на базе Cortex, в том числе и для stm32. Использование CMSIS позволяет получить самый быстрый и компактный код, но требует от разработчика высокого уровня понимания \u0026ldquo;железа\u0026rdquo;. Крутые \u0026ldquo;гуру\u0026rdquo; пишут на CMSIS.\nHAL - высокоуровневая библиотека разработаная компанией ST для программирования микроконтроллеров stm32. По сути, это обёртка над CMSIS, сильно упрощающая разработку, и снижающая уровень вхождения. Однако как говорится, за всё нужно платить, код на HAL довольно таки \u0026ldquo;тяжёлый\u0026rdquo; и занимает много памяти.\nВсе необходимые функции HAL\u0026rsquo;а генерируются в STM32CubeMX, поэтому не требуется ничего устанавливать и подключать. В общем очень удобно, снижает уровень вхождения до минимума, и сильно облегчает жизнь не только начинающим падаванам, но профессиональным разработчикам. Так же HAL обеспечивает переносимость кода с камня на камень. То есть написав программу для F1 вы практически \u0026ldquo;безболезненно\u0026rdquo; сможете использовать её на F3.\nКак говорилось выше, HAL это фактически обёртка над CMSIS, а значит изучая HAL вы можете проследить что делают функции и тем самым изучать CMSIS, и постепенно прокачивать \u0026ldquo;скилы\u0026rdquo;.\nПримеры на HAL LL - это набор драйверов (функций), которые можно описать как \u0026ldquo;низкоуровневый HAL\u0026rdquo;. Эти функции выполняются быстрее чем HAL, но работают не со всей приферией. Код опять же генерируется в STM32CubeMX (там есть выбор, HAL или LL).\nSPL - эта библиотка нечто среднее между CMSIS и HAL. Можно сказать, что HAL пришёл на смену SPL. Многие разработчики продолжают её использовать, но она постепенно уходит в прошлое. Например разрабатывать программы для современных камней (F7, H7, L4) с помощью SPL вы уже не сможете. Так что браться за её изучение не стоит.\nЕсли есть какой-то старый код на SPL, то его вроде как можно перенести на LL, и даже вроде как есть специальные конверторы , но я за это ничего не знаю - не интересно.\n"},{"id":3,"href":"/","title":"Главная","parent":"","content":""},{"id":4,"href":"/environment/setup-clion-for-stm32/","title":"Настройка IDE CLion","parent":"Рабочая среда","content":"Источник: @stm32std Автор: @leech001 Установка IDE Clion в Windows 10     Переходим на сайт компании JetBrains скачиваем и устанавливаем по умолчанию среду CLion https://www.jetbrains.com/clion/download/\nПосле установки необходимо произвести минимальные настройки для работы с STM32:\n  Переходим в настройки среды, где скачиваем и устанавливаем MinGW (все по умолчанию).   После установки везде в Toolchains оставляем все по умолчанию кроме Debugger.   Скачиваем и устанавливаем GNU Embedded Toolchain for ARM по адресу https://developer.arm.com/tools-and-software/open-sourcesoftware/developer-tools/gnu-toolchain/gnu-rm/downloads для Windows.\n  Прописываем в Debugger путь до arm-none-eabi-gdb.exe   Переходим в раздел Embedded Development   Скачиваем и устанавливаем OpenOCD https://gnutoolchains.com/armeabi/openocd/\n  Прописываем в OpenOCD Location путь до openocd.exe   Скачиваем и устанавливаем STM32CubeMX https://www.st.com/en/development-tools/stm32cubemx.html\n  Прописываем в STM32CubeMX Location путь до STM32CubeMX.exe   На этом настройка Clion для работы с STM32 завершена.\nРабота с Clion для STM32       Создаете проект в STM32CubeMX для вашего типа микроконтроллера.\n  В Project Manager устанавливаем тип IDE STM32CubeIDE и генерируем проект.   Открываем проект в Clion   Автоматически Clion определяет тип микропроцессора и генерирует CMakeList\n  Настраиваем конфигурацию вашего отладчика для OpenOCD в примере отладчик ST-LINK v.2 микроконтроллер STM32F103C8T6 (bluepill)   Конфигурации для вашего микроконтроллера и отладчика ищем через Assistant в директории с OpenOCD или в (..OpenOCD-20191216- 0.10.0\\share\\openocd\\scripts\\board\\).\nСобственно, на этом работа по настройке отладчика для проекта закончена.\nНе забываем в случае наличия ошибок при компиляции проекта периодически особенно после подключения заголовочных файлов *.h сбрасывать кэш и перегенерировать проект. В случае использования FreeRTOS и появлении ошибок при компиляции в конфигурационном файле CMakeLists_template.txt снимите комментарии со следующих строк.\n#Uncomment for hardware floating point SET(FPU_FLAGS \u0026#34;-mfloat-abi=hard -mfpu=fpv4-sp-d16\u0026#34;) add_definitions(-DARM_MATH_CM4 -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -D__FPU_PRESENT=1) и перегенерируйте проект (см. абзац выше).\nУстановка IDE Clion в Linux Ubuntu 20.10      Устанавливаем Cmake  sudo apt-get install cmake Устанавливаем ARM Toolchain  sudo apt-get -y install gcc-arm-none-eabi Устанавливаем OpenOCD  sudo apt install openocd Устанавливаем Java JRE  sudo apt install openjdk-15-jre Устанавливаем поддержку ST-Link  sudo apt install stlink-tools  Скачиваем и устанавливаем STM32CubeMX https://www.st.com/en/development-tools/stm32cubemx.html#get-software\n  Скачиваем и устанавливаем Jetbrains ToolBox https://www.jetbrains.com/ru-ru/toolbox-app/\n  Устанавливаем через Jetbrains ToolBox Clion\n  Запускаем Clion и заходим в его настройки Проверяем что Toolchains у нас настроен и доступен Проверяем что Embedded Development корректно видит все составляющие. В случае необходимости подсовываем ему пути куда установили компоненты.\n  Создаете проект в STM32CubeMX для вашего типа микроконтроллера В Project Manager устанавливаем тип IDE STM32CubeIDE и генерируем проект   Открываем проект, подготовленный с использованием STM32CubeMX   Настраиваем OpenOCD под вашу плату Добавляем конфигурацию OpenOCD и выбираем конфигурационный файл для вашей платы. На этом настройка закончена С помощью волшебных кнопочек мы можем собирать, запускать или отлаживать микроконтроллер.\n  На этом вся настройка закончена. Удачной работы!\nС уважением,\nБуланов Константин\nemail: leech001@gmail.com\n"},{"id":5,"href":"/usefull/","title":"Полезное","parent":"Главная","content":"Источник: @stm32std  С чего начать?  Статьи про stm32  Примеры на гитхабе  Видеоуроки  Мартин М. Инсайдерское_руководство  Олег Вальпа. STM32  Андрей Курниц. FreeRTOS  Язык программирования C  Компилятор языков C, C++  Штурмуем STM32  Руководство разработчика Cortex-M (рус. перевод)  "},{"id":6,"href":"/environment/","title":"Рабочая среда","parent":"Главная","content":"Источник: @stm32std IDE       STM32CubeMX (Win, Linux, Mac). Программа для инициализации периферии и генерации первичного кода в графическом режиме. Разработана компанией ST специально для stm32. Генерирует код основаный на библиотеке HAL, либо LL. Очень удобный, полезный и бесплатный инструмент. Генерирует код для различных IDE представленных ниже, а так же Makefile для поклонников \u0026ldquo;хардкора\u0026rdquo; 😉\n  Atollic TrueSTUDIO (Win, Linux). Среда основанная на Eclipse. Выкуплена компанией ST и распространяется бесплатно. С недавнего времени поддержка прекращена в пользу STM32CubeIDE. Тем не менее, лично я всё ещё пользуюсь TrueSTUDIO.\n  STM32CubeIDE (Win, Linux, Mac). Собственная разработка компании ST объединяющая в себе TrueSTUDIO и STM32CubeMX.\n  Keil MDK (Win). Популярная среди разработчиков среда. Является бесплатной отчасти. Если написаный код не превышает 30Кб, то бесплатно, если больше, то надо покупать лицензию.\n  SW4STM32 (Win, Linux, Mac). Эта среда так же основана на Eclipse, и похожа на TrueSTUDIO. Думаю в дальнейшем Alexey или ещё кто-нибудь расскажет о ней больше.\n  IAR (Win). Простая (в плане количества надстроек) и мощная среда, с собственным компилятором, но при этом не самым удобным редактором кода. Очень быстрая сборка и отладка.\n  CLion (Win, Linux, Mac) бесплатный пробный период на 30 дней.\n  Утилиты      STM32CubeProg (Win, Linux, Mac) ST-LINK utility (Win) ST MCU Finder - приложение для подбора микроконтроллера производства ST по параметрам. PC , Android , iOS .  Help для IDE     CubeIDE     Добавление своей папки в проект ↕  Источник: @stm32std   AtollicTrueStudio      Установка TrueStudio и STM32CubeMX  Atollic_TrueSTUDIO_for_STM32_User_Guide  Atollic_Serial_wire_viewer_realtime_tracing  Загрузка без Debug  Добавление ссылки на файл  Проект на CMSIS в TrueStudio   "},{"id":7,"href":"/manuals/","title":"Руководства","parent":"Главная","content":"Источник: @stm32std  Список всех существующих микроконтроллеров STM32 (WIKI на английском)  Тех. мануалы и другая документация по ARM  Mastering STM32  Перевод Mastering STM32  Ещё перевод Mastering stm32  Guide_STM32  Discovering the STM32 Microcontroller  Список литературы на английском от ST  Youtube - канал компании ST  STM32F4_FreeRTOS  ARM-ASM-Tutorial   "},{"id":8,"href":"/references/","title":"Справочные руководства","parent":"Главная","content":"Источник: @stm32std STM32H7      Reference manual (RM0433)  Programming manual (PM0253)   STM32F7      Reference manual F72x, F73x (RM0431)  Reference manual F74x, F75x (RM0385)  Reference manual F76x, F77x (RM0410)  Programming manual (PM0253)   STM32F4      Reference manual F401xB/C, F401xD/E (RM0368)  Reference manual F410 (RM0401)  Reference manual F413/423 (RM0430)  Reference manual F405/415, F407/417, F427/437, F429/439 (RM0090)  Reference manual F446 (RM0390)  Reference manual F469, F479 (RM0386)  Programming manual (PM0214)   STM32F3      Reference manual F301x6/8, F318x8 (RM0366)  Reference manual F302xB/C/D/E, F302x6/8 (RM0365)  Reference manual F303xB/C/D/E, F303x6/8, F328x8, F358xC, F398xE (RM0316)  Reference manual F334x (RM0364)  Reference manual F37x (RM0313)  Programming manual (PM0214)  UM1570  Timers   STM32F2      Reference manual F2xx (RM0033)  Programming manual (PM0056)   STM32F1      Reference manual F100 (RM0041)  Reference manual F101, F102, F103, F105, F107 (RM0008)  Programming manual (PM0056)   STM32F0      Reference manual F030x4/x6/x8/xC, F070x6/xB (RM0360)  Reference manual F0x1, F0x2, F0x8 (RM0091)  Programming manual (PM0215)   STM32L4      Reference manual L41x, L42x, L43x, L44x, L45x, L46x (RM0394)  Reference manual L4x5, L4x6 (RM0351)  Programming manual (PM0214)   STM32L1      Reference manual L100, L151, L152, L162 (RM0038)  Programming manual (PM0056)   STM32L0 и STM32G0      Reference manual L0x0 (RM0451)  Reference manual 0x1 (RM0377)  Reference manual L0x2 (0376)  Reference manual L0x3 (RM0367)  Programming manual (PM0223)   ERRATA      F10xxC/D/E  F40x, F41x  F42xx, F43xx  F76xxx, F77xxx   Примечания      System memory BOOT - AN2606   "},{"id":9,"href":"/tutorials/","title":"Статьи","parent":"Главная","content":"Источник: @stm32std  🌐 STM32 - DMA (часть 1 , часть 2 ) 🌐 STM32 - Virtual COM Port  🌐 STM32 - дисплей TM1637  🌐 STM32 - счётчик DWT - микросекундные паузы  🌐 STM32 - память  🌐 STM32 - GPRS  🌐 STM32 - GSM  🌐 STM32 - NRF24L01  🌐 STM32 - ИК-пульт  🌐 Частотомер на микроконтроллере STM32  🌐 Таймеры STM32 HAL (часть 1 , часть 2 ) 🌐 STM32 - прошивка \u0026ldquo;по воздуху\u0026rdquo; через ESP  🌐 USART STM32 HAL  🌐 HAL STM32  🌐 STM32 - энергосбережение и WatchDog  🌐 RTC HAL STM32  🌐 STM32 - с чего начать?  🌐 ADC HAL STM32  🌐 Прошивка STM32 через UART  🌐 ST-LINK/V2  🌐 STM32 - STM32CubeMX и Atollic TrueStudio  🌐 STM32 - диммер  🌐 Arduino STM32  🌐 Аналог ардуиновской millis()  🌐 STM32 Flash как EEPROM  🌐 STM32 - I2C - HAL_BUSY  🌐 STM32 - Wiegand card reader  🌐 STM32MP1 - часть первая  🌐 Устранение \u0026ldquo;дребезга\u0026rdquo; кнопок  🌐 STM32 - приёмник 433 МГц  🌐 STM32 - SPI флешка W25Qxx  🌐 Переход с TrueSTUDIO на STM32CubeIDE  🌐 STM32 - кольцевой буфер USART\u0026rsquo;а  🌐 STM32 - TFT дисплей часть первая  🌐 Отладка FreeRTOS в Eclipse, TrueStudio и CubeIDE   "}]